// This file was generated by PermissionsDispatcher. Do not modify!
package dynsoft.xone.android.start;

import android.support.v4.app.ActivityCompat;
import java.lang.String;
import permissions.dispatcher.PermissionUtils;

final class FrmLoginPermissionsDispatcher {
  private static final int REQUEST_GETMULTI = 0;

  private static final String[] PERMISSION_GETMULTI = new String[] {"android.permission.READ_PHONE_STATE","android.permission.WRITE_EXTERNAL_STORAGE"};

  private static final int REQUEST_LOGIN = 1;

  private static final String[] PERMISSION_LOGIN = new String[] {"android.permission.READ_PHONE_STATE","android.permission.WRITE_EXTERNAL_STORAGE"};

  private FrmLoginPermissionsDispatcher() {
  }

  static void getMultiWithPermissionCheck(FrmLogin target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_GETMULTI)) {
      target.getMulti();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_GETMULTI, REQUEST_GETMULTI);
    }
  }

  static void loginWithPermissionCheck(FrmLogin target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_LOGIN)) {
      target.login();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_LOGIN, REQUEST_LOGIN);
    }
  }

  static void onRequestPermissionsResult(FrmLogin target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_GETMULTI:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.getMulti();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_GETMULTI)) {
          target.multiNeverAsk();
        } else {
          target.multiDenied();
        }
      }
      break;
      case REQUEST_LOGIN:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.login();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_LOGIN)) {
          target.multiNeverAsk();
        } else {
          target.multiDenied();
        }
      }
      break;
      default:
      break;
    }
  }
}
